name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Install test tools
      run: |
        pip install detect-secrets bandit pyyaml
      continue-on-error: true

    - name: Run Phase 11 tests (Automated Deployment)
      run: |
        python scripts/test_phase_11_automated_deployment.py
      continue-on-error: true

    - name: Run Phase 4 tests (File Generation)
      run: |
        python scripts/test_phase_4_file_generation.py
      continue-on-error: true

    - name: Run Phase 1 tests (Foundation)
      env:
        RDS_HOST: localhost
        RDS_PORT: 5432
        RDS_DATABASE: test_db
        RDS_USERNAME: test_user
        RDS_PASSWORD: test_pass
        S3_BUCKET: test-bucket
        AWS_ACCESS_KEY_ID: test_key
        AWS_SECRET_ACCESS_KEY: test_secret
      run: |
        python scripts/test_phase_1_foundation.py
      continue-on-error: true

    - name: Run Category C - E2E Workflows (22 tests)
      run: |
        pytest tests/test_e2e_workflow.py \
               tests/test_e2e_deployment_flow.py \
               -v --tb=short
      continue-on-error: false

    - name: Run Category D - Analysis Frameworks (37 tests)
      run: |
        pytest tests/test_recursive_book_analysis.py \
               tests/test_recommendation_integration.py \
               tests/test_phase6_1_automated_book_analysis.py \
               -v --tb=short
      continue-on-error: false

    - name: Run Category E - Edge Cases (26 tests)
      run: |
        pytest tests/test_tier4_edge_cases.py \
               tests/test_dims_integration.py \
               -v --tb=short
      continue-on-error: false

    - name: Run Critical Infrastructure Tests (78 tests)
      run: |
        pytest tests/integration/ \
               tests/security/ \
               -v --tb=short
      continue-on-error: false

    - name: Run unit tests
      env:
        # Mock environment variables for testing
        RDS_HOST: localhost
        RDS_PORT: 5432
        RDS_DATABASE: test_db
        RDS_USERNAME: test_user
        RDS_PASSWORD: test_pass
        S3_BUCKET: test-bucket
        S3_REGION: us-east-1
        AWS_ACCESS_KEY_ID: test_key
        AWS_SECRET_ACCESS_KEY: test_secret
        DEEPSEEK_API_KEY: test_deepseek_key
        ANTHROPIC_API_KEY: test_anthropic_key
      run: |
        # Run tests that don't require real AWS/API connections
        pytest tests/ -v -m "not integration" --cov=synthesis --cov=mcp_server --cov-report=xml --cov-report=term
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true
    
    - name: Test import integrity
      run: |
        python -c "import synthesis; import mcp_server; print('âœ… All imports successful')"

  naming-convention:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest

    - name: Check naming convention compliance
      run: |
        pytest tests/test_code_naming_convention.py -v --tb=short
      continue-on-error: false  # FAIL build if violations found

    - name: Generate compliance report
      if: failure()
      run: |
        pytest tests/test_code_naming_convention.py::TestCodeNamingConventionCompliance::test_06_generate_full_compliance_report -v -s

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install black isort mypy
    
    - name: Check code formatting with black
      run: black --check .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: isort --check-only .
      continue-on-error: true
    
    - name: Type checking with mypy
      run: mypy synthesis/ mcp_server/ --ignore-missing-imports
      continue-on-error: true
