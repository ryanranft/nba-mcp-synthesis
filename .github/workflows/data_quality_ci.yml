name: Data Quality CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'data/**'
      - 'mcp_server/data_*.py'
      - 'tests/test_data_*.py'
      - '.github/workflows/data_quality_ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'data/**'
      - 'mcp_server/data_*.py'
      - 'tests/test_data_*.py'
  workflow_dispatch:
    inputs:
      quality_threshold:
        description: 'Minimum quality score (0.0-1.0)'
        required: false
        default: '0.9'

jobs:
  validate-data-quality:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov great-expectations
        pip install scikit-learn scipy pandas numpy

    - name: Run data validation pipeline tests
      run: |
        pytest tests/test_data_validation_pipeline.py -v --cov=mcp_server/data_validation_pipeline.py --cov-report=term-missing

    - name: Run data quality tests
      run: |
        pytest tests/test_data_quality.py -v --cov=mcp_server/data_quality.py --cov-report=term-missing

    - name: Run data cleaning tests
      run: |
        pytest tests/test_data_cleaning.py -v --cov=mcp_server/data_cleaning.py --cov-report=term-missing

    - name: Run data profiler tests
      run: |
        pytest tests/test_data_profiler.py -v --cov=mcp_server/data_profiler.py --cov-report=term-missing

    - name: Run integrity checker tests
      run: |
        pytest tests/test_integrity_checker.py -v --cov=mcp_server/integrity_checker.py --cov-report=term-missing

    - name: Validate data quality threshold
      run: |
        python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path.cwd()))

        from mcp_server.data_quality import DataQualityChecker
        import pandas as pd
        import numpy as np

        # Create sample data for validation
        np.random.seed(42)
        sample_data = pd.DataFrame({
            'value': np.random.normal(100, 15, 1000),
            'category': np.random.choice(['A', 'B', 'C'], 1000)
        })

        # Run quality check
        checker = DataQualityChecker('ci_test')
        checker.expect_column_to_exist('value')
        checker.expect_column_to_exist('category')
        checker.expect_column_values_to_not_be_null('value')

        report = checker.validate(sample_data)

        threshold = float('${{ github.event.inputs.quality_threshold || 0.9 }}')

        print(f'Quality Score: {report.success_rate:.2%}')
        print(f'Threshold: {threshold:.2%}')

        if report.success_rate < threshold:
            print(f'❌ Quality score {report.success_rate:.2%} below threshold {threshold:.2%}')
            sys.exit(1)
        else:
            print(f'✅ Quality score {report.success_rate:.2%} meets threshold {threshold:.2%}')
        "

    - name: Generate quality report
      if: always()
      run: |
        echo "## Data Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Data Validation Pipeline: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Data Quality: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Data Cleaning: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Data Profiler: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Integrity Checker: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quality Threshold" >> $GITHUB_STEP_SUMMARY
        echo "Minimum quality score: ${{ github.event.inputs.quality_threshold || '0.9' }}" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        flags: data-quality
        fail_ci_if_error: false
