name: Feature Store CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'mcp_server/feature_store.py'
      - 'tests/test_feature_store.py'
      - '.github/workflows/feature_store_ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'mcp_server/feature_store.py'
      - 'tests/test_feature_store.py'
  workflow_dispatch:

jobs:
  validate-feature-store:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-feature-store-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-feature-store-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run feature store tests
      run: |
        pytest tests/test_feature_store.py -v --cov=mcp_server/feature_store.py --cov-report=xml --cov-report=term-missing

    - name: Validate feature definitions
      run: |
        python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path.cwd()))

        from mcp_server.feature_store import FeatureStore, FeatureDefinition
        from datetime import datetime

        # Initialize feature store
        store = FeatureStore()

        # Register test features
        player_ppg = FeatureDefinition(
            feature_id='player_ppg',
            name='Player Points Per Game',
            description='Average points scored per game',
            feature_type='continuous',
            data_type='float',
            source='player_stats',
            transformation='AVG(points) / AVG(games_played)',
            version=1,
            created_at=datetime.now(),
        )

        team_win_pct = FeatureDefinition(
            feature_id='team_win_pct',
            name='Team Win Percentage',
            description='Team winning percentage',
            feature_type='continuous',
            data_type='float',
            source='team_stats',
            transformation='wins / (wins + losses)',
            version=1,
            created_at=datetime.now(),
        )

        # Register features
        store.register_feature(player_ppg)
        store.register_feature(team_win_pct)

        # Validate registration
        assert 'player_ppg' in store.features
        assert 'team_win_pct' in store.features

        print('✅ Feature definitions validated successfully')
        print(f'Total features registered: {len(store.features)}')
        "

    - name: Check feature compatibility
      run: |
        python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path.cwd()))

        from mcp_server.feature_store import FeatureStore, FeatureDefinition
        from datetime import datetime

        store = FeatureStore()

        # Create two versions of the same feature
        v1 = FeatureDefinition(
            feature_id='test_feature',
            name='Test Feature',
            description='Test',
            feature_type='continuous',
            data_type='float',
            source='test',
            transformation='AVG(value)',
            version=1,
            created_at=datetime.now(),
        )

        v2 = FeatureDefinition(
            feature_id='test_feature',
            name='Test Feature',
            description='Test',
            feature_type='continuous',
            data_type='float',
            source='test',
            transformation='AVG(value)',
            version=2,
            created_at=datetime.now(),
        )

        store.register_feature(v1)
        store.register_feature(v2)

        # Compare versions
        comparison = store.compare_feature_versions('test_feature', 1, 2)

        print('✅ Feature compatibility check passed')
        print(f'Comparison result: {comparison}')
        "

    - name: Test deployment hooks
      run: |
        python -c "
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path.cwd()))

        from mcp_server.feature_store import FeatureStore

        store = FeatureStore()

        # Register deployment hooks
        def pre_deploy(feature_id, version):
            print(f'Pre-deploy hook: {feature_id} v{version}')
            return True

        def post_deploy(feature_id, version):
            print(f'Post-deploy hook: {feature_id} v{version}')
            return True

        store.register_deployment_hook('pre_deploy', pre_deploy)
        store.register_deployment_hook('post_deploy', post_deploy)

        # Trigger deployment notification
        store.notify_deployment('test_feature', 1, 'test_deployment')

        print('✅ Deployment hooks tested successfully')
        "

    - name: Generate feature store report
      if: always()
      run: |
        echo "## Feature Store Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Feature store tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Feature definitions validated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Feature compatibility checked" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Deployment hooks tested" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Features are ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Run data validation pipeline before production deployment" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: feature-store
        fail_ci_if_error: false
