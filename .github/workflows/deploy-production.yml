name: Deploy to Production

on:
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nba-mcp-synthesis
  EKS_CLUSTER_NAME: nba-mcp-synthesis-prod
  KUBERNETES_NAMESPACE: nba-mcp-synthesis

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run comprehensive validation
        run: |
          python3 scripts/comprehensive_validation.py \
            --project nba-mcp-synthesis \
            --output validation_report.json

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation_report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.0"

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          # Update deployment with new image
          kubectl set image deployment/nba-mcp-synthesis \
            nba-mcp-synthesis=${{ needs.build.outputs.image-tag }} \
            -n ${{ env.KUBERNETES_NAMESPACE }}

          # Wait for rollout to complete
          kubectl rollout status deployment/nba-mcp-synthesis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=nba-mcp-synthesis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

          # Get service endpoint
          SERVICE_ENDPOINT=$(kubectl get service nba-mcp-synthesis-service -n ${{ env.KUBERNETES_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Run basic health checks
          curl -f http://$SERVICE_ENDPOINT/health || exit 1
          curl -f http://$SERVICE_ENDPOINT/metrics || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Deployment to production completed successfully!"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"

  rollback:
    if: failure()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/nba-mcp-synthesis -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout status deployment/nba-mcp-synthesis -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s

      - name: Notify rollback
        run: |
          echo "ðŸ”„ Deployment rolled back due to failure"

