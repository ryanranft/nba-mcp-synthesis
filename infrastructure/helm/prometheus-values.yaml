# NBA MCP Synthesis - Prometheus Stack Configuration
# Production-ready Prometheus, Grafana, and Alertmanager configuration

# Prometheus configuration
prometheus:
  prometheusSpec:
    retention: 30d
    retentionSize: 50GB
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi
    resources:
      requests:
        memory: 2Gi
        cpu: 1000m
      limits:
        memory: 4Gi
        cpu: 2000m
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
      - job_name: "nba-mcp-synthesis"
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - nba-mcp-synthesis
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: nba-mcp-synthesis-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

# Grafana configuration
grafana:
  enabled: true
  adminPassword: "admin123" # Change this in production
  persistence:
    enabled: true
    storageClassName: gp3
    size: 10Gi
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
  grafana.ini:
    server:
      root_url: "https://grafana.nba-mcp-synthesis.example.com"
    security:
      admin_user: admin
      admin_password: admin123
    auth.anonymous:
      enabled: false
    auth.basic:
      enabled: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "nba-mcp-synthesis"
          orgId: 1
          folder: "NBA MCP Synthesis"
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/nba-mcp-synthesis
  dashboards:
    nba-mcp-synthesis:
      nba-mcp-dashboard:
        gnetId: 0
        revision: 1
        datasource: Prometheus
      secrets-health-dashboard:
        gnetId: 0
        revision: 1
        datasource: Prometheus

# Alertmanager configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
    config:
      global:
        smtp_smarthost: "localhost:587"
        smtp_from: "alerts@nba-mcp-synthesis.example.com"
      route:
        group_by: ["alertname", "cluster", "service"]
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: "slack-warnings"
        routes:
          - match:
              severity: critical
            receiver: "pagerduty-critical"
      receivers:
        - name: "slack-warnings"
          slack_configs:
            - api_url: "YOUR_SLACK_WEBHOOK_URL"
              channel: "#nba-mcp-alerts"
              title: "NBA MCP Synthesis Alert"
              text: "{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}"
        - name: "pagerduty-critical"
          pagerduty_configs:
            - service_key: "YOUR_PAGERDUTY_SERVICE_KEY"
              description: "{{ .GroupLabels.alertname }}"
              details:
                summary: "{{ .GroupLabels.alertname }}"
                description: "{{ .CommonAnnotations.description }}"

# Node Exporter
nodeExporter:
  enabled: true

# Kube State Metrics
kubeStateMetrics:
  enabled: true

# Service Monitors
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverError: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

