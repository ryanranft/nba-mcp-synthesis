#!/bin/bash
# Audit Logging Script

set -e

# Configuration
AUDIT_LOG="/var/log/secrets_audit.log"
AUDIT_DIR="/var/log/secrets_audit"
RETENTION_DAYS=90
COMPRESSION_DAYS=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${GREEN}[$(date -u +%Y-%m-%dT%H:%M:%SZ)]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date -u +%Y-%m-%dT%H:%M:%SZ)] ERROR:${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[$(date -u +%Y-%m-%dT%H:%M:%SZ)] WARNING:${NC} $1"
}

# Initialize audit logging
init_audit_logging() {
    log "Initializing audit logging..."

    # Create audit directory
    mkdir -p "$AUDIT_DIR"

    # Create audit log file
    touch "$AUDIT_LOG"

    # Set permissions
    chmod 600 "$AUDIT_LOG"
    chmod 700 "$AUDIT_DIR"

    log "Audit logging initialized"
}

# Log audit event
log_audit_event() {
    local event_type=$1
    local resource=$2
    local user=$3
    local action=$4
    local result=$5
    local details=$6

    local timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    local log_entry="$timestamp|$event_type|$resource|$user|$action|$result|$details"

    echo "$log_entry" >> "$AUDIT_LOG"

    # Also log to daily file
    local daily_log="$AUDIT_DIR/audit_$(date +%Y-%m-%d).log"
    echo "$log_entry" >> "$daily_log"
}

# Search audit logs
search_audit_logs() {
    local search_term=$1
    local start_date=$2
    local end_date=$3

    log "Searching audit logs for: $search_term"

    if [ -n "$start_date" ] && [ -n "$end_date" ]; then
        # Search within date range
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec grep -l "$search_term" {} \;
    else
        # Search all logs
        find "$AUDIT_DIR" -name "audit_*.log" -exec grep -l "$search_term" {} \;
    fi
}

# Generate audit report
generate_audit_report() {
    local output_file=$1
    local start_date=$2
    local end_date=$3

    log "Generating audit report..."

    {
        echo "Audit Report"
        echo "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "Generated by: $USER"
        echo "Date range: $start_date to $end_date"
        echo "=================================="
        echo

        echo "Event Summary:"
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \; | \
            awk -F'|' '{print $2}' | sort | uniq -c | sort -nr
        echo

        echo "User Activity:"
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \; | \
            awk -F'|' '{print $4}' | sort | uniq -c | sort -nr
        echo

        echo "Resource Access:"
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \; | \
            awk -F'|' '{print $3}' | sort | uniq -c | sort -nr
        echo

        echo "Failed Actions:"
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \; | \
            grep "FAILED" | awk -F'|' '{print $2, $3, $4, $5, $6}' | sort
        echo

        echo "Recent Events:"
        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \; | \
            tail -20

    } > "$output_file"

    log "Audit report generated: $output_file"
}

# Clean old audit logs
clean_old_audit_logs() {
    log "Cleaning old audit logs..."

    # Remove logs older than retention period
    find "$AUDIT_DIR" -name "audit_*.log" -mtime +$RETENTION_DAYS -delete
    log "Removed audit logs older than $RETENTION_DAYS days"

    # Compress logs older than compression period
    find "$AUDIT_DIR" -name "audit_*.log" -mtime +$COMPRESSION_DAYS -exec gzip {} \;
    log "Compressed audit logs older than $COMPRESSION_DAYS days"
}

# Monitor audit logs
monitor_audit_logs() {
    log "Starting audit log monitoring..."

    # Monitor the main audit log file
    tail -f "$AUDIT_LOG" | while read line; do
        echo "AUDIT: $line"

        # Check for failed actions
        if echo "$line" | grep -q "FAILED"; then
            log_warning "Failed action detected: $line"
        fi

        # Check for suspicious activity
        if echo "$line" | grep -q "PERMISSION_CHANGE\|SECRET_ACCESS\|SECRET_MODIFICATION"; then
            log_warning "Suspicious activity detected: $line"
        fi
    done
}

# Export audit logs
export_audit_logs() {
    local output_file=$1
    local start_date=$2
    local end_date=$3

    log "Exporting audit logs..."

    {
        echo "Audit Log Export"
        echo "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "Generated by: $USER"
        echo "Date range: $start_date to $end_date"
        echo "=================================="
        echo

        find "$AUDIT_DIR" -name "audit_*.log" -newermt "$start_date" ! -newermt "$end_date" -exec cat {} \;

    } > "$output_file"

    log "Audit logs exported to: $output_file"
}

# Show help
show_help() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  init                    Initialize audit logging"
    echo "  log [type] [resource] [user] [action] [result] [details]  Log audit event"
    echo "  search [term] [start] [end]  Search audit logs"
    echo "  report [file] [start] [end]  Generate audit report"
    echo "  clean                   Clean old audit logs"
    echo "  monitor                 Monitor audit logs"
    echo "  export [file] [start] [end]  Export audit logs"
    echo "  help                    Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 init"
    echo "  $0 log SECRET_ACCESS /path/to/secret.env $USER READ SUCCESS"
    echo "  $0 search SECRET_ACCESS 2024-01-01 2024-01-31"
    echo "  $0 report report.txt 2024-01-01 2024-01-31"
    echo "  $0 clean"
    echo "  $0 monitor"
    echo "  $0 export export.txt 2024-01-01 2024-01-31"
}

# Main function
main() {
    case "$1" in
        init)
            init_audit_logging
            ;;
        log)
            if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ] || [ -z "$6" ]; then
                log_error "All log parameters not specified"
                show_help
                exit 1
            fi
            log_audit_event "$2" "$3" "$4" "$5" "$6" "$7"
            ;;
        search)
            if [ -z "$2" ]; then
                log_error "Search term not specified"
                show_help
                exit 1
            fi
            search_audit_logs "$2" "$3" "$4"
            ;;
        report)
            if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
                log_error "Output file and date range not specified"
                show_help
                exit 1
            fi
            generate_audit_report "$2" "$3" "$4"
            ;;
        clean)
            clean_old_audit_logs
            ;;
        monitor)
            monitor_audit_logs
            ;;
        export)
            if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
                log_error "Output file and date range not specified"
                show_help
                exit 1
            fi
            export_audit_logs "$2" "$3" "$4"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"

