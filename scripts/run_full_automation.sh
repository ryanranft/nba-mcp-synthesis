#!/bin/bash

# NBA MCP Synthesis - Full Automation Script
# This script runs the complete book analysis and integration workflow
# You can walk away and it will handle everything automatically

set -e  # Exit on any error

echo "🚀 Starting NBA MCP Synthesis Full Automation"
echo "=============================================="
echo "📅 Started: $(date)"
echo ""

# Configuration
CONFIG_FILE="config/books_to_analyze_all_ai_ml.json"
LOG_FILE="logs/automation_$(date +%Y%m%d_%H%M%S).log"
PROGRESS_FILE="analysis_results/automation_progress.json"

# Create logs directory if it doesn't exist
mkdir -p logs
mkdir -p analysis_results

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to check if deployment is still running
check_deployment_status() {
    if pgrep -f "deploy_book_analysis.py" > /dev/null; then
        return 0  # Still running
    else
        return 1  # Not running
    fi
}

# Function to monitor progress
monitor_progress() {
    log "🔍 Monitoring deployment progress..."

    while check_deployment_status; do
        if [ -f "analysis_results/multi_pass_progress.json" ]; then
            # Extract current status
            CURRENT_PASS=$(jq -r '.current_pass // "unknown"' analysis_results/multi_pass_progress.json 2>/dev/null || echo "unknown")
            OVERALL_STATUS=$(jq -r '.overall_status // "unknown"' analysis_results/multi_pass_progress.json 2>/dev/null || echo "unknown")

            log "📊 Current Status: Pass $CURRENT_PASS, Overall: $OVERALL_STATUS"

            # Check if we have master recommendations
            if [ -f "analysis_results/master_recommendations.json" ]; then
                REC_COUNT=$(jq '.recommendations | length' analysis_results/master_recommendations.json 2>/dev/null || echo "0")
                log "📋 Master Recommendations: $REC_COUNT"
            fi
        fi

        sleep 30  # Check every 30 seconds
    done

    log "✅ Deployment completed!"
}

# Function to generate final report
generate_final_report() {
    log "📄 Generating final automation report..."

    REPORT_FILE="analysis_results/automation_final_report.md"

    cat > "$REPORT_FILE" << EOF
# NBA MCP Synthesis - Automation Final Report

**Generated:** $(date)
**Configuration:** $CONFIG_FILE
**Log File:** $LOG_FILE

---

## Summary

This report summarizes the automated book analysis and integration workflow.

### Configuration
- **Total Books:** $(jq '.metadata.total_books' "$CONFIG_FILE" 2>/dev/null || echo "N/A")
- **Categories:** $(jq -r '.metadata.categories | keys | join(", ")' "$CONFIG_FILE" 2>/dev/null || echo "N/A")
- **High Priority Books:** $(jq '.metadata.priorities.high' "$CONFIG_FILE" 2>/dev/null || echo "N/A")

### Results
EOF

    # Add deployment results if available
    if [ -f "analysis_results/final_deployment_report.md" ]; then
        echo "### Deployment Results" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        cat "analysis_results/final_deployment_report.md" >> "$REPORT_FILE"
    fi

    # Add integration results if available
    if [ -f "integration_summary.md" ]; then
        echo "" >> "$REPORT_FILE"
        echo "### Integration Results" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        cat "integration_summary.md" >> "$REPORT_FILE"
    fi

    # Add master recommendations summary
    if [ -f "analysis_results/master_recommendations.json" ]; then
        echo "" >> "$REPORT_FILE"
        echo "### Master Recommendations Summary" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        echo "Total Recommendations: $(jq '.recommendations | length' analysis_results/master_recommendations.json)" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
        echo "By Category:" >> "$REPORT_FILE"
        jq -r '.recommendations | group_by(.category) | .[] | "\(.[0].category): \(length) recommendations"' analysis_results/master_recommendations.json >> "$REPORT_FILE" 2>/dev/null || echo "Unable to categorize"
    fi

    echo "" >> "$REPORT_FILE"
    echo "---" >> "$REPORT_FILE"
    echo "*Report generated by NBA MCP Synthesis Automation*" >> "$REPORT_FILE"

    log "📄 Final report saved: $REPORT_FILE"
}

# Function to send completion notification (if configured)
send_notification() {
    log "🔔 Sending completion notification..."

    # You can add email, Slack, or other notification methods here
    # For now, just log the completion
    log "✅ Automation completed successfully!"
    log "📄 Check $REPORT_FILE for full results"
}

# Main execution
main() {
    log "🎯 Starting NBA MCP Synthesis automation..."

    # Check if deployment is already running
    if check_deployment_status; then
        log "🔄 Deployment already running, monitoring progress..."
        monitor_progress
    else
        log "🚀 Starting new deployment..."
        python3 scripts/deploy_book_analysis.py --config "$CONFIG_FILE" --verbose &
        monitor_progress
    fi

    # Generate final report
    generate_final_report

    # Send notification
    send_notification

    log "🎉 Automation completed successfully!"
    log "📊 Check analysis_results/ for all generated files"
    log "📄 Check $REPORT_FILE for comprehensive results"
}

# Run main function
main "$@"




