#!/bin/bash
# Test Runner for Unified Secrets Manager

set -e

# Configuration
TEST_DIR="./tests"
REPORT_DIR="./test_reports"
COVERAGE_DIR="./coverage"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log() {
    echo -e "${GREEN}[$(date -u +%Y-%m-%dT%H:%M:%SZ)]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date -u +%Y-%m-%dT%H:%M:%SZ)] ERROR:${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[$(date -u +%Y-%m-%dT%H:%M:%SZ)] WARNING:${NC} $1"
}

# Check dependencies
check_dependencies() {
    log "Checking dependencies..."

    # Check Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 is not installed"
        exit 1
    fi

    # Check pytest
    if ! python3 -c "import pytest" &> /dev/null; then
        log_error "pytest is not installed"
        exit 1
    fi

    # Check coverage
    if ! python3 -c "import coverage" &> /dev/null; then
        log_warning "coverage is not installed, installing..."
        pip install coverage
    fi

    log "Dependencies check completed"
}

# Run unit tests
run_unit_tests() {
    log "Running unit tests..."

    python3 -m pytest "$TEST_DIR/test_unified_secrets_manager.py" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/unit_tests.xml" \
        --html="$REPORT_DIR/unit_tests.html" \
        --self-contained-html

    if [ $? -eq 0 ]; then
        log "Unit tests passed"
    else
        log_error "Unit tests failed"
        exit 1
    fi
}

# Run integration tests
run_integration_tests() {
    log "Running integration tests..."

    python3 -m pytest "$TEST_DIR/test_integration.py" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/integration_tests.xml" \
        --html="$REPORT_DIR/integration_tests.html" \
        --self-contained-html

    if [ $? -eq 0 ]; then
        log "Integration tests passed"
    else
        log_error "Integration tests failed"
        exit 1
    fi
}

# Run Docker scenario tests
run_docker_tests() {
    log "Running Docker scenario tests..."

    python3 -m pytest "$TEST_DIR/test_docker_scenarios.py" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/docker_tests.xml" \
        --html="$REPORT_DIR/docker_tests.html" \
        --self-contained-html

    if [ $? -eq 0 ]; then
        log "Docker scenario tests passed"
    else
        log_error "Docker scenario tests failed"
        exit 1
    fi
}

# Run all tests
run_all_tests() {
    log "Running all tests..."

    python3 -m pytest "$TEST_DIR" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/all_tests.xml" \
        --html="$REPORT_DIR/all_tests.html" \
        --self-contained-html

    if [ $? -eq 0 ]; then
        log "All tests passed"
    else
        log_error "All tests failed"
        exit 1
    fi
}

# Run tests with coverage
run_tests_with_coverage() {
    log "Running tests with coverage..."

    python3 -m coverage run -m pytest "$TEST_DIR" -v
    python3 -m coverage report -m
    python3 -m coverage html -d "$COVERAGE_DIR"

    log "Coverage report generated in $COVERAGE_DIR"
}

# Run specific test
run_specific_test() {
    local test_file=$1

    log "Running specific test: $test_file"

    python3 -m pytest "$TEST_DIR/$test_file" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/specific_test.xml" \
        --html="$REPORT_DIR/specific_test.html" \
        --self-contained-html

    if [ $? -eq 0 ]; then
        log "Specific test passed"
    else
        log_error "Specific test failed"
        exit 1
    fi
}

# Run tests in parallel
run_tests_parallel() {
    log "Running tests in parallel..."

    python3 -m pytest "$TEST_DIR" \
        -v \
        --tb=short \
        --junitxml="$REPORT_DIR/parallel_tests.xml" \
        --html="$REPORT_DIR/parallel_tests.html" \
        --self-contained-html \
        -n auto

    if [ $? -eq 0 ]; then
        log "Parallel tests passed"
    else
        log_error "Parallel tests failed"
        exit 1
    fi
}

# Generate test report
generate_test_report() {
    log "Generating test report..."

    {
        echo "Test Report"
        echo "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "Generated by: $USER"
        echo "=================================="
        echo

        echo "Test Results:"
        find "$REPORT_DIR" -name "*.xml" -exec echo "  - {}" \;
        echo

        echo "HTML Reports:"
        find "$REPORT_DIR" -name "*.html" -exec echo "  - {}" \;
        echo

        echo "Coverage Report:"
        if [ -d "$COVERAGE_DIR" ]; then
            echo "  - $COVERAGE_DIR/index.html"
        else
            echo "  - No coverage report generated"
        fi

    } > "$REPORT_DIR/test_report.txt"

    log "Test report generated: $REPORT_DIR/test_report.txt"
}

# Clean up
cleanup() {
    log "Cleaning up..."

    # Remove temporary files
    find . -name "*.pyc" -delete
    find . -name "__pycache__" -type d -exec rm -rf {} +
    find . -name ".pytest_cache" -type d -exec rm -rf {} +

    log "Cleanup completed"
}

# Show help
show_help() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  check                 Check dependencies"
    echo "  unit                  Run unit tests"
    echo "  integration          Run integration tests"
    echo "  docker               Run Docker scenario tests"
    echo "  all                  Run all tests"
    echo "  coverage             Run tests with coverage"
    echo "  specific [file]      Run specific test file"
    echo "  parallel             Run tests in parallel"
    echo "  report               Generate test report"
    echo "  cleanup              Clean up temporary files"
    echo "  help                 Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 check"
    echo "  $0 unit"
    echo "  $0 integration"
    echo "  $0 docker"
    echo "  $0 all"
    echo "  $0 coverage"
    echo "  $0 specific test_unified_secrets_manager.py"
    echo "  $0 parallel"
    echo "  $0 report"
    echo "  $0 cleanup"
}

# Main function
main() {
    # Create report directory
    mkdir -p "$REPORT_DIR"
    mkdir -p "$COVERAGE_DIR"

    case "$1" in
        check)
            check_dependencies
            ;;
        unit)
            check_dependencies
            run_unit_tests
            ;;
        integration)
            check_dependencies
            run_integration_tests
            ;;
        docker)
            check_dependencies
            run_docker_tests
            ;;
        all)
            check_dependencies
            run_all_tests
            ;;
        coverage)
            check_dependencies
            run_tests_with_coverage
            ;;
        specific)
            if [ -z "$2" ]; then
                log_error "Test file not specified"
                show_help
                exit 1
            fi
            check_dependencies
            run_specific_test "$2"
            ;;
        parallel)
            check_dependencies
            run_tests_parallel
            ;;
        report)
            generate_test_report
            ;;
        cleanup)
            cleanup
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"


